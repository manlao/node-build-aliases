#!/usr/bin/env bash
#
# Summary: List or Update Node aliases
#
# Usage: nodenv aliases
#        nodenv aliases --update [--upgrade]
#        nodenv aliases --version
#
#   --update        Update aliases from nodejs.org
#     --upgrade          Upgrade installed aliases
#   --version          Show version of node-build-aliases
#
# More: https://github.com/manlao/node-build-aliases

set -e
[ -n "$NODENV_DEBUG" ] && set -x

shopt -s nullglob

READLINK=$(type -p greadlink readlink 2>/dev/null | head -1)

if [ -z "$READLINK" ]; then
  echo "cannot find readlink - are you missing GNU coreutils?" >&2
  exit 1
fi

resolve_link() {
  "$READLINK" "$1"
}

realpath() {
  local CWD="$PWD" REALPATH="$1" NAME

  while [ -n "$REALPATH" ]; do
    NAME="${REALPATH##*/}"
    [ "$NAME" = "$REALPATH" ] || cd "${REALPATH%/*}" || exit 1
    REALPATH="$(resolve_link "$NAME" || true)"
  done

  echo "${PWD}/$NAME"
  cd "$CWD" || exit 1
}

realdir() {
  local REALPATH
  REALPATH=$(realpath "$1")

  echo "${REALPATH%/*}"
}

resolve_definition() {
  local ALIASES_PATH ALIAS="$1" DEFINITION="$1"
  ALIASES_PATH=$(aliases_path)

  while [ -f "$ALIASES_PATH/$DEFINITION" ]; do
    DEFINITION="$(<"$ALIASES_PATH/$DEFINITION")"
  done

  if [ "$DEFINITION" != "$ALIAS" ]; then
    echo "$DEFINITION"
  fi
}

resolve_aliases() {
  local ALIASES ALIAS RESOLVED=()
  IFS=" " read -ra ALIASES <<<"$(get_aliases)"

  for ALIAS in "${ALIASES[@]}"; do
    local DEFINITION=
    DEFINITION=$(resolve_definition "$ALIAS")

    if [ "$DEFINITION" = "$1" ]; then
      RESOLVED+=("$ALIAS")
    fi
  done

  echo "${RESOLVED[@]}"
}

get_aliases() {
  local PATTERN ITEM PREFIX="${1:+$1/}" ALIASES=() DIRS=()
  PATTERN="$(aliases_path)/$PREFIX*"

  for ITEM in $PATTERN; do
    if [ -f "$ITEM" ]; then
      ALIASES+=("$PREFIX${ITEM##*/}")
    elif [ -d "$ITEM" ]; then
      DIRS+=("$ITEM")
    fi
  done

  for ITEM in "${DIRS[@]}"; do
    local DIR_ALIASES
    DIR_ALIASES=$(get_aliases "$PREFIX${ITEM##*/}")
    ALIASES+=("${DIR_ALIASES[@]}")
  done

  echo "${ALIASES[@]}"
}

get_alias_info() {
  local ALIASES_PATH ALIAS="$1" INFO="$1" TARGET="$1"
  ALIASES_PATH=$(aliases_path)

  while [ -f "$ALIASES_PATH/$TARGET" ]; do
    TARGET="$(<"$ALIASES_PATH/$TARGET")"
    INFO="$INFO -> $TARGET"
  done

  if [ -d "$(nodenv root)/versions/$TARGET" ]; then
    echo "$INFO (installed)"
  else
    echo "$INFO"
  fi
}

list() {
  local VERSION ALIASES ALIAS PREFIX
  VERSION=$(nodenv version-name)
  IFS=" " read -ra ALIASES <<<"$(get_aliases)"

  for ALIAS in "${ALIASES[@]}"; do
    if [ "$VERSION" = "$ALIAS" ]; then
      PREFIX="*"
    else
      PREFIX=" "
    fi

    echo "$PREFIX $(get_alias_info "$ALIAS")"
  done
}

update() {
  if nodenv commands | grep "update-version-defs" 1>/dev/null 2>&1; then
    nodenv prune-version-defs -f
    nodenv update-version-defs
  fi

  local ALIASES_PATH INDEX_TABLE
  ALIASES_PATH=$(aliases_path)
  INDEX_TABLE=$(curl -fsSL "https://nodejs.org/dist/index.tab")

  # https://github.com/nvm-sh/nvm/blob/master/nvm.sh
  local LTS_LINES
  LTS_LINES=$(echo "$INDEX_TABLE" |
    command sed "1d; s/^//;" |
    command awk '{
        if ($10 ~ /^\-?$/) { next }
        if ($10 && !a[tolower($10)]++) {
          if (alias) { print alias, version }
          alias_name = "lts/" tolower($10)
          if (!alias) { print "lts/*", alias_name }
          alias = alias_name
          version = $1
        }
      }
      END {
        if (alias) {
          print alias, version
        }
      }')

  rm -rf "${ALIASES_PATH:?}/*"

  while read -r LINE; do
    local ALIAS="${LINE%% *}" VERSION="${LINE#* }"

    mkdir -p "$(dirname "$ALIASES_PATH/$ALIAS")"

    if [[ "$VERSION" =~ ^(v|V)([0-9\.]+)$ ]]; then
      VERSION="${BASH_REMATCH[2]}"
    fi

    echo "$VERSION" >"$ALIASES_PATH/$ALIAS"
  done <<<"$LTS_LINES"

  local MANIFEST LATEST
  read -ra MANIFEST < <(echo "$INDEX_TABLE" | grep src | sort -t. -u -k 1.2,1n -k 2,2n -k 3,3n | tail -1)
  LATEST="${MANIFEST[0]##*v}"
  echo "$LATEST" >"$ALIASES_PATH/node"

  local VERSIONS_PATH ALIASES ALIAS
  VERSIONS_PATH="$(nodenv root)/versions"
  IFS=" " read -ra ALIASES <<<"$(get_aliases)"

  for ALIAS in "${ALIASES[@]}"; do
    if [ -L "$VERSIONS_PATH/$ALIAS" ]; then
      local REALPATH DEFINITION
      REALPATH=$(realpath "$VERSIONS_PATH/$ALIAS")
      DEFINITION=$(resolve_definition "$ALIAS")

      if [ "${REALPATH##*/}" != "$DEFINITION" ]; then
        rm -f "${VERSIONS_PATH:?}/${ALIAS:?}"

        if [ "$1" = "--upgrade" ]; then
          nodenv uninstall -f "${REALPATH##*/}"
          nodenv install -s "$ALIAS"
          # https://github.com/nodenv/nodenv#nodenv-shell
          export NODENV_VERSION="$ALIAS"
          corepack enable npm pnpm yarn
        fi
      fi
    fi
  done

  list
}

version() {
  echo "$(<"$(realdir "${BASH_SOURCE[0]}")/../VERSION")"
}

aliases_path() {
  echo "$(nodenv root)/plugins/node-build-aliases/share/node-build"
}

definitions_path() {
  echo "$(realdir "$(command -v nodenv-install)")/../share/node-build"
}

plugin_definitions_path() {
  if nodenv commands | grep "update-version-defs" 1>/dev/null 2>&1; then
    echo "$(realdir "$(command -v "nodenv-update-version-defs")")/../share/node-build"
  fi
}

case "$#" in
0)
  list
  ;;

1)
  case "$1" in
  --update)
    update
    ;;
  --version | --aliases_path | --definitions_path | --plugin_definitions_path)
    "${1##*-}"
    ;;
  *)
    nodenv help --usage aliases >&2
    ;;
  esac
  ;;

2)
  case "$1" in
  --update)
    if [ "$2" = "--upgrade" ] || [ "$2" = "--upgrade-and-enable-corepack" ]; then
      update "$2"
    else
      nodenv help --usage aliases >&2
    fi
    ;;
  --resolve_definition | --resolve_aliases)
    "${1##*-}" "$2"
    ;;
  *)
    nodenv help --usage aliases >&2
    ;;
  esac
  ;;

*)
  nodenv help --usage aliases >&2
  ;;
esac
